import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import pytz


API_TOKEN = '7352744899:AAFQmRbAAzkV8QPA75xdml04jw1l7q88vds'
CHANNEL_ID = -1002244000979  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
DISCUSSION_GROUP_ID = -1002225022005  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö –∫–Ω–æ–ø–æ–∫
current_messages = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
scheduled_messages = {}

last_sent_dates = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
weekdays_translation = {
    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "wednesday": "–°—Ä–µ–¥–∞",
    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "saturday": "–°—É–±–±–æ—Ç–∞",
    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å MSK
msk_tz = pytz.timezone('Europe/Moscow')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –≤—Ä–µ–º–µ–Ω–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
class AdminTime(StatesGroup):
    waiting_for_time = State()
    waiting_for_custom_time = State()


class ScheduleTemplate(StatesGroup):
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_message = State()


# –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞)
CREATOR_ID = 1250100261  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞

# –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
admin_time_minutes = 60


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def create_time_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", callback_data="set_time_custom")
    ]
    keyboard.add(*buttons)
    return keyboard


def create_template_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="view_templates"),
        InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")
    ]
    keyboard.add(*buttons)
    return keyboard


@dp.callback_query_handler(lambda callback_query: callback_query.data == "view_templates")
async def view_templates(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        if not scheduled_messages:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω"
            keyboard = InlineKeyboardMarkup(row_width=1)
            create_template_button = InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")
            back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
            keyboard.add(create_template_button, back_button)

            await callback_query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.", reply_markup=keyboard)
        else:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–∞—Ö
            keyboard = InlineKeyboardMarkup(row_width=1)
            for weekday, templates in scheduled_messages.items():
                translated_weekday = weekdays_translation[weekday]
                for index, template in enumerate(templates):
                    time = template['time'].strftime('%H:%M')
                    content = template['content']
                    button_text = f"{translated_weekday} –≤ {time}: {content.text if content.text else '–ú–µ–¥–∏–∞'}"
                    button_callback_data = f"select_template_{weekday}_{index}"
                    keyboard.add(InlineKeyboardButton(text=button_text, callback_data=button_callback_data))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
            keyboard.add(back_button)

            await callback_query.message.edit_text("–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:", reply_markup=keyboard)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("select_template_"))
async def select_template(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        data = callback_query.data.split("_")
        weekday = data[2]
        index = int(data[3])

        template = scheduled_messages[weekday][index]
        time = template['time'].strftime('%H:%M')
        content = template['content']

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        keyboard = InlineKeyboardMarkup(row_width=1)
        delete_button = InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_template_{weekday}_{index}")
        back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_templates")
        keyboard.add(delete_button, back_button)

        await callback_query.message.edit_text(
            f"–®–∞–±–ª–æ–Ω –¥–ª—è {weekdays_translation[weekday]} –≤ {time}:\n{content.text if content.text else '–ú–µ–¥–∏–∞'}",
            reply_markup=keyboard
        )
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("delete_template_"))
async def delete_template(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        data = callback_query.data.split("_")
        weekday = data[2]
        index = int(data[3])

        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        del scheduled_messages[weekday][index]
        if not scheduled_messages[weekday]:
            del scheduled_messages[weekday]

        await callback_query.answer("–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω.", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        await view_templates(callback_query)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


def create_weekday_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_monday"),
        InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_tuesday"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_wednesday"),
        InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_thursday"),
        InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_friday"),
        InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_saturday"),
        InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_sunday"),
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    ]
    keyboard.add(*buttons)
    return keyboard


def create_main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∞", callback_data="set_admin_time"),
        InlineKeyboardButton(text="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="schedule_message")
    ]
    keyboard.add(*buttons)
    return keyboard


@dp.callback_query_handler(lambda callback_query: callback_query.data == "main_menu", state="*")
async def return_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id == CREATOR_ID:
        keyboard = create_main_menu()
        await callback_query.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


async def update_admin_button():
    if CHANNEL_ID in current_messages:
        try:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=current_messages[CHANNEL_ID])
            logging.info(f"{datetime.now()} - –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {current_messages[CHANNEL_ID]}")
        except Exception as e:
            logging.error(f"{datetime.now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–Ω–æ–ø–∫–∏: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text="üí¨", callback_data=f"promote_{datetime.now().timestamp()}")
    keyboard.add(button)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –∫–∞–Ω–∞–ª
        sent_message = await bot.send_message(
            chat_id=CHANNEL_ID,
            text="–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç",
            reply_markup=keyboard
        )
        current_messages[CHANNEL_ID] = sent_message.message_id
        logging.info(f"{datetime.now()} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logging.error(f"{datetime.now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@dp.channel_post_handler(content_types=['text', 'photo', 'audio', 'video', 'document'])
async def on_post(message: types.Message):
    if message.chat.id == CHANNEL_ID:
        await update_admin_button()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("promote_"))
async def on_publish_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        chat = await bot.get_chat(CHANNEL_ID)
        if chat.type != 'channel':
            await callback_query.answer("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.")
            logging.error(f"{datetime.now()} - –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status == 'creator':
            await callback_query.answer("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞.")
            logging.info(f"{datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞.")
            return

        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.promote_chat_member(
            chat_id=CHANNEL_ID,
            user_id=user_id,
            can_post_messages=True,
        )

        await callback_query.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–≤–æ–π –ø–æ—Å—Ç.")
        logging.info(
            f"{datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ {admin_time_minutes} –º–∏–Ω—É—Ç")

        # –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ç–∑—ã–≤–æ–º –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await asyncio.sleep(admin_time_minutes * 60)

        # –û—Ç–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await revoke_admin_rights(user_id)

    except Exception as e:
        logging.error(f"{datetime.now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def revoke_admin_rights(user_id):
    try:
        # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await bot.promote_chat_member(
            chat_id=CHANNEL_ID,
            user_id=user_id,
            can_post_messages=False,
            can_edit_messages=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False,
            can_manage_chat=False,
            can_manage_voice_chats=False,
            can_change_info=False
        )
        logging.info(f"{datetime.now()} - –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logging.error(f"{datetime.now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.from_user.id == CREATOR_ID:
        keyboard = create_main_menu()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")


@dp.callback_query_handler(lambda callback_query: callback_query.data == "set_admin_time")
async def set_admin_time(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        keyboard = create_time_keyboard()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                                               reply_markup=keyboard)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


@dp.callback_query_handler(lambda callback_query: callback_query.data == "set_time_custom")
async def set_time_custom(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await AdminTime.waiting_for_custom_time.set()


@dp.message_handler(state=AdminTime.waiting_for_custom_time)
async def process_custom_time(message: types.Message, state: FSMContext):
    global admin_time_minutes
    try:
        admin_time_minutes = int(message.text)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        keyboard = InlineKeyboardMarkup(row_width=1)
        back_button = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.add(back_button)

        await message.answer(
            f"–í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {admin_time_minutes} –º–∏–Ω—É—Ç.",
            reply_markup=keyboard)
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.callback_query_handler(lambda callback_query: callback_query.data == "schedule_message")
async def schedule_message(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        keyboard = create_template_menu()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


@dp.callback_query_handler(lambda callback_query: callback_query.data == "create_template")
async def create_template(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == CREATOR_ID:
        keyboard = create_weekday_keyboard()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
        await ScheduleTemplate.waiting_for_day.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("weekday_"),
                           state=ScheduleTemplate.waiting_for_day)
async def process_weekday(callback_query: types.CallbackQuery, state: FSMContext):
    weekday = callback_query.data.split("_")[1]
    translated_weekday = weekdays_translation[weekday]
    await state.update_data(weekday=weekday)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(row_width=1)
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(back_button)

    await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {translated_weekday}")
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú", reply_markup=keyboard)
    await ScheduleTemplate.waiting_for_time.set()


@dp.message_handler(state=ScheduleTemplate.waiting_for_time)
async def process_template_time(message: types.Message, state: FSMContext):
    try:
        time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(time=time)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(row_width=1)
        back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="create_template")
        keyboard.add(back_button)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
        await ScheduleTemplate.waiting_for_message.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")


@dp.message_handler(state=ScheduleTemplate.waiting_for_message, content_types=types.ContentType.ANY)
async def process_template_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    weekday = data.get("weekday")
    time = data.get("time")

    if weekday not in scheduled_messages:
        scheduled_messages[weekday] = []

    scheduled_messages[weekday].append({
        'time': time,
        'content_type': message.content_type,
        'content': message
    })

    translated_weekday = weekdays_translation[weekday]
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {translated_weekday} –≤ {time.strftime('%H:%M')} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
    await state.finish()

    keyboard = create_main_menu()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)


async def scheduler():
    moscow_tz = pytz.timezone('Europe/Moscow')

    while True:
        now = datetime.now(moscow_tz)
        current_weekday = now.strftime("%A").lower()
        current_time = now.time()
        logging.info(f"{datetime.now()} - –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_weekday}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

        if current_weekday in scheduled_messages:
            for template in scheduled_messages[current_weekday]:
                last_sent_key = f"{current_weekday}_{template['time']}"
                last_sent_date = last_sent_dates.get(last_sent_key)

                if (last_sent_date != now.date() and
                        template['time'].hour == current_time.hour and
                        template['time'].minute == current_time.minute):

                    logging.info(f"{datetime.now()} - –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {template['time']}")

                    content_type = template['content_type']
                    content = template['content']

                    try:
                        if content_type == 'text':
                            await bot.send_message(chat_id=CHANNEL_ID, text=content.text)
                        elif content_type == 'photo':
                            await bot.send_photo(chat_id=CHANNEL_ID, photo=content.photo[-1].file_id,
                                                 caption=content.caption)
                        elif content_type == 'video':
                            await bot.send_video(chat_id=CHANNEL_ID, video=content.video.file_id,
                                                 caption=content.caption)
                        elif content_type == 'audio':
                            await bot.send_audio(chat_id=CHANNEL_ID, audio=content.audio.file_id,
                                                 caption=content.caption)
                        elif content_type == 'document':
                            await bot.send_document(chat_id=CHANNEL_ID, document=content.document.file_id,
                                                    caption=content.caption)

                        last_sent_dates[last_sent_key] = now.date()
                        logging.info(
                            f"{datetime.now()} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {current_weekday} –≤ {template['time']}")

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        await update_admin_button()

                    except Exception as e:
                        logging.error(f"{datetime.now()} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await asyncio.sleep(60)

def escape_markdown_v2(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

@dp.message_handler(content_types=types.ContentType.ANY, chat_id=DISCUSSION_GROUP_ID)
async def handle_discussion_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        commenter = escape_markdown_v2(message.from_user.username)
        original_message = message.reply_to_message

        # –í—ã–≤–æ–¥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {original_message.message_id}")

        if original_message.text:
            original_message_text = escape_markdown_v2(original_message.text[:30])
        elif original_message.caption:
            original_message_text = escape_markdown_v2(original_message.caption[:30])
        else:
            original_message_text = '–ú–µ–¥–∏–∞'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_message_link = f"t.me/c/2225022005/{original_message.message_id}?thread={original_message.message_id}"
        print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original_message_link}")

        notification_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{commenter} –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ "
            f"[{original_message_text}]({original_message_link})"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=notification_text,
                parse_mode="MarkdownV2",
                disable_web_page_preview=True  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ–±-–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await update_admin_button()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
